// vim: set ft=devicetree: commentstring=//%s:
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define NAV     3
#define NPD     4

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        thumb_lt: thumb_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        hsk: hold_or_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_OR_STICKY_KEY";
            bindings = <&kp>, <&skq>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <50>;
            flavor = "tap-preferred";
        };

        awm_super: awm_super {
            compatible = "zmk,behavior-tap-dance";
            label = "AWM_SUPER";
            #binding-cells = <0>;
            bindings = <&lmt LEFT_GUI ESCAPE>, <&lmt LS(LGUI) ESCAPE>;
        };

        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_QUICK_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
            ignore-modifiers;
        };

        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "LMT";
            bindings = <&lm1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        hml_hold: hml_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr_hold: hmr_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "hold-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        with_caps: with_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "WITH_CAPS";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
        };

        prefer_hold: prefer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "PREFER_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "hold-preferred";
        };
    };

    macros {
        lm: lm {
            label = "LAYER_MOD";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        lm1: lm1 {
            compatible = "zmk,behavior-macro-one-param";
            label = "LM1";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&mo 1 &macro_param_1to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&mo 1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <15 16>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&prefer_hold LALT TAB  &kp Q  &kp W  &kp E  &kp R      &kp T    &kp Y           &kp U              &kp I      &kp O       &kp P      &kp BSLH
&kp LCTRL              &kp A  &kp S  &kp D  &kp F      &kp G    &kp H           &kp J              &kp K      &kp L       &kp SEMI   &kp SQT
&kp LSHIFT             &kp Z  &kp X  &kp C  &kp V      &kp B    &kp N           &kp M              &kp COMMA  &kp PERIOD  &kp SLASH  &kp RSHIFT
                                     &mo 1  &kp SPACE  &mo 2    &with_caps 4 0  &thumb_lt 3 ENTER  &kp RGUI
            >;

            label = "DEFAULT";
        };

        num_layer {
            bindings = <
&kp LA(TAB)  &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp F6   &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans       &kp N1     &kp N2     &kp N3     &kp N4     &kp N5     &kp N6   &kp N7  &kp N8  &kp N9  &kp N0   &trans
&trans       &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp F11    &kp F12  &trans  &trans  &trans  &trans   &trans
                                   &trans     &trans     &trans     &trans   &trans  &trans
            >;

            label = "NUM";
        };

        sym_layer {
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET       &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS       &kp EQUAL  &kp LBKT   &kp RBKT              &trans                 &kp TILDE
&trans  &trans    &trans  &trans    &trans    &trans       &kp UNDERSCORE  &kp PLUS   &kp LBRC   &kp RBRC              &trans                 &trans
                          &trans    &trans    &trans       &trans          &trans     &trans
            >;

            label = "SYM";
        };

        nav_layer {
            bindings = <
&trans      &trans        &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans          &trans          &kp PAGE_DOWN   &kp PAGE_UP   &trans           &trans  &kp DELETE
&trans      &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3       &bt BT_SEL 4    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &trans
&bt BT_CLR  &trans        &out OUT_USB      &out OUT_BLE       &out OUT_TOG       &trans          &kp BACKSPACE   &kp HOME        &kp END       &trans           &trans  &trans
                                            &trans             &trans             &trans          &trans          &trans          &trans
            >;

            label = "NAV";
        };

        app_layer {
            bindings = <
&trans  &trans      &trans      &trans      &trans      &trans        &trans          &kp K_MUTE    &kp K_PLAY_PAUSE  &trans      &trans  &trans
&trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)    &kp C_PREVIOUS  &kp C_VOL_DN  &kp C_VOL_UP      &kp C_NEXT  &trans  &trans
&trans  &trans      &trans      &trans      &trans      &trans        &trans          &trans        &trans            &trans      &trans  &trans
                                &trans      &trans      &trans        &trans          &trans        &trans
            >;

            label = "APP";
        };

        npd_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp CARET  &kp N7  &kp N8  &kp N9  &kp MINUS  &kp STAR
&trans  &trans  &trans  &trans  &trans  &trans    &kp N0     &kp N4  &kp N5  &kp N6  &kp PLUS   &kp SLASH
&trans  &trans  &trans  &trans  &trans  &trans    &kp EQUAL  &kp N1  &kp N2  &kp N3  &trans     &trans
                        &trans  &trans  &trans    &trans     &trans  &trans
            >;

            label = "NPD";
        };
    };
};
